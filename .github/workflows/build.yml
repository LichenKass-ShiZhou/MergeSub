name: Build and Package Qt CMake Project as DEB

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'Release'
        type: choice
        options:
        - Debug
        - Release
        - RelWithDebInfo
        - MinSizeRel

env:
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'Release' }}
  APP_NAME: "MergeSub"  # 请确保这是你的可执行文件名称
  VERSION: "1.0.0"      # 设置你的应用版本号

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgl1-mesa-dev \
          libxkbcommon-x11-0 \
          libdbus-1-3 \
          libfontconfig1 \
          libxrender1 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-render-util0 \
          patchelf \
          dh-make \
          devscripts \
          debhelper

    - name: Install Qt using aqtinstall
      run: |
        python3 -m pip install aqtinstall
        aqt install-qt linux desktop 6.5.3 -O /opt/qt
        echo "QT_DIR=/opt/qt/6.5.3/gcc_64" >> $GITHUB_ENV
        echo "/opt/qt/6.5.3/gcc_64/bin" >> $GITHUB_PATH

    - name: Configure project
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_PREFIX_PATH=$QT_DIR \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DCMAKE_INSTALL_PREFIX=/usr \
              ..

    - name: Build project
      run: |
        cd build
        make -j$(nproc)

    - name: Create DEB package structure
      run: |
        # 创建 DEB 包目录结构
        mkdir -p deb-package/DEBIAN
        mkdir -p deb-package/usr/bin
        mkdir -p deb-package/usr/share/applications
        mkdir -p deb-package/usr/share/icons/hicolor/256x256/apps
        mkdir -p deb-package/usr/share/$APP_NAME
        
        # 复制可执行文件
        cp build/$APP_NAME deb-package/usr/bin/
        chmod +x deb-package/usr/bin/$APP_NAME
        
        # 复制 MergeSub 文件夹内容（如果存在）
        if [ -d "MergeSub" ]; then
          cp -r MergeSub/* deb-package/usr/share/$APP_NAME/
          echo "Copied MergeSub folder contents to /usr/share/$APP_NAME/"
        else
          echo "MergeSub folder not found, skipping copy operation"
        fi
        
        # 创建桌面文件
        cat > deb-package/usr/share/applications/$APP_NAME.desktop << EOF
[Desktop Entry]
Type=Application
Name=$APP_NAME
Exec=$APP_NAME
Icon=$APP_NAME
Categories=Utility;
EOF

    - name: Create DEB control file
      run: |
        # 创建控制文件
        cat > deb-package/DEBIAN/control << EOF
Package: $APP_NAME
Version: $VERSION
Section: utils
Priority: optional
Architecture: amd64
Depends: libgl1-mesa-dev, libxkbcommon-x11-0, libdbus-1-3, libfontconfig1, libxrender1
Maintainer: Your Name <your.email@example.com>
Description: A Qt application built with CMake
 $APP_NAME is a Qt-based application that provides useful functionality.
EOF

    - name: Create post-install and pre-remove scripts
      run: |
        # 创建安装后脚本（可选）
        cat > deb-package/DEBIAN/postinst << EOF
#!/bin/bash
# Update icon cache
if [ -x "\$(command -v update-desktop-database)" ]; then
    update-desktop-database /usr/share/applications
fi
if [ -x "\$(command -v gtk-update-icon-cache)" ]; then
    gtk-update-icon-cache /usr/share/icons/hicolor
fi
EOF
        
        # 创建卸载前脚本（可选）
        cat > deb-package/DEBIAN/prerm << EOF
#!/bin/bash
# Clean up application data
rm -rf /usr/share/$APP_NAME
EOF
        
        # 设置脚本可执行权限
        chmod +x deb-package/DEBIAN/postinst
        chmod +x deb-package/DEBIAN/prerm

    - name: Build DEB package
      run: |
        # 使用 dpkg-deb 构建 DEB 包
        dpkg-deb --build deb-package
        mv deb-package.deb $APP_NAME-$VERSION-amd64.deb

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: $APP_NAME-DEB-${{ github.run_id }}
        path: |
          $APP_NAME-$VERSION-amd64.deb
          build/$APP_NAME
        if-no-files-found: error